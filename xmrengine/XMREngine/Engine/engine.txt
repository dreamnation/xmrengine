
Startup:

    XMREngine.Initialise()
        start maint timer for XMREngine.DoMaintenance()

    XMREngine.AddRegion()
        register XMREngine.OnRezScript()


Rez a script:

    XMREngine.OnRezScript()
        make sure engine enabled
        XMREngine.TryToCompile()
        XMREngine.TryToLoad()
            AppDomain.CreateInstanceAndUnwrap(XMRLoader)
            new XMRInstance()
            if (.state file exists) {
                XMRInstance.Suspend()
                read .state file
            }
            if (.state ok) {
                XMRInstance.RestoreShapshot()
                if (restore error) {
                    XMRInstance.PostEvent(state_entry)
                    XMRInstaance.PostEvent(on_rez)
                }
                restore XMRInstance.DetectParams from .state
                AsyncCommandManager.CreateFromData()
                maybe XMRInstance.PostEvent(on_rez)
                maybe XMRInstance.PostEvent(attach)
                XMRInstance.Resume()
            } else {
                write .state from instance
                XMRInstance.PostEvent(state_entry)
                maybe XMRInstance.PostEvent(on_rez)
                maybe XMRInstance.PostEvent(attach)
                maybe XMRInstance.PostEvent(changed)
            }
            XMREngine.WakeUp()


Event comes in:

    XMREvent.<event_name>()
        XMREngine.PostObjectEvent()
            XMREngine.PostScriptEvent() for each script in object
                XMRInstance.PostEvent()
                    enqueue event
                    XMRInstance.CheckRunStatus()
                        XMREngine.WakeUp()


Script thread:

    XMRScript.Run()
        XMREngine.RunOneCycle()
            XMRInstance.RunOne() for each script
                if (idle) {
                    dequeue event
                    XMRLoader.PostEvent()
                        ScriptWrapper.StartEventHandler()
                            MMRUThread.Start()
                } else {
                    XMRLoader.RunOne()
                        ScriptWrapper.ResumeEventHandler()
                            MMRUThread.Resume()
                    other stuff
                }
            block until time to run again


--------------------------------------------------------------------------------

Outside app domain:

    Engine

        XMREngine

            localID = the object as a whole, may contain many scripts
            assetID = script file (ie, source and dll)
            itemID  = instance of script within object (ie, state)

            public:
                Initialise() - called at server startup time
                AddRegion() - called ???
                RemoveRegion() - called ???
                RegionLoaded() - called ???
                Close() - called ???
                PostScriptEvent() - incoming event
                PostObjectEvent() - incoming event
                DetectParams() - ???
                SetMinEventDelay() - ???
                GetStartParameter() - instance.StartParam ???
                                      = as passed to OnRezScript
                SetScriptState() - start/stop script via instance.Running
                On{Start,Stop}Script() - start/stop script via instance.Running
                GetScriptState() - retrieves instance.Running
                OnGetScriptRunning() - retrieves instance.Running
                ApiResetScript() - calls instance.ApiReset()
                OnScriptReset(),ResetScript() - calls instance.Suspend(),
                                                calls instance.Reset(),
                                                calls instance.Resume()
                GetXMLState() - get script instance state to XML
                                including DLL itself, itemID, assetID
                SetXMLState() - write .state and .dll files from XML
                    ??? it always returns 'false' ???
                OnRezScript() - called when object containing a script is
                                rezzed inworld, compiles and instantiates it,
                                restores state, posts some initial events
                    localID = uint of object as a whole
                    itemID = this script within that particular object
                    script = script source string
                    startParam = ???
                    postOnRez = post on_rez() event
                    engine = ???
                    stateSource = ??? filters posting of some 
                                      initial events
                OnRemoveScript() - suspends, disposes and unloads script instance
                                   deletes .state file
                                   deletes .dll file if no more refs
                RunOneCycle() - run all scripts through one cycle
                                block until ready to do it all again
                Suspend() - script sleep, calls instance.Suspend()
                Die() - calls instance.Die()
                GetScriptErrors() - retrieve and delete script compile errors
                                    as written via ErrorHandler()

            private:
                RunTest() - called via "xmr" console command
                ErrorHandler() - outputs compilation error messages
                GetExecutionState() - get script instance state to XML
                WriteStateFile() - calls GetExecutionState()
                                   writes XML to .state file
                DoMaintenance() - write .state file for all our script instances
                                  called periodically

        AssemblyResolver
            public:
                OnAssemblyResolve() - load .DLL file by looking in "bin" and
                                      m_ScriptBasePath directories

        XMREvent
            contains methods for each event that call PostObjectEvent()

        XMRInstance
            public:

              called in any thread:
                .ctor() - call ApiManager() ???
                          call XMRLoader.Load() to load and instantiate script
                          call m_Part.SetScriptEvents() ???
                Dispose() - purges queued events and disposes script ???
                PostEvent() - queue event to script & start it running
                Suspend(ms) - block it running for that many milliseconds
                Suspend() - increment suspend count
                            block it run running again
                Resume() - decrement suspend count
                           allow it to run again
                           call XMREngine WakeUp()
                ApiReset() - set reset flag so RunOne() will call Reset()
                Die() - set die flag so RunOne() will call DeleteSceneObject()
                GetSnapshot() - get script state to a byte[]
                RestoreSnapshot() - restore script state from a byte[]
                                    may also schedule script for running

              called in running thread:
                RunOne() - called to step script through execution
                           if dequeues event, calls XMRLoader.PostEvent() to start it
                           returns date/time to call it back at
                Reset() - various things to reset

            private:
                CheckRunStatus() - mart it scheduled or not based on suspend
                                   count, and call XMREngine.WakeUp() if woken
                ReleaseControls() - call as part of Reset()

    XMRSched

        One per engine - contains thread to run event handlers
            calls XMREngine.RunOneCycle() repeatedly

        Stop() - signal thread to exit
        Shutdown() - wait for thread to exit

    Compiler

Inside app domain:

    ??? does compiler get loaded in here too - remove if so ???

    Loader
        XMRLoader
            public:
                .ctor() - instantiates a ScriptBaseClass() object
                InitApi() - passed on to ScriptBaseClass() object
                Load() - loads script DLL in memory and instantiates it
                PostEvent() - send event to script, script must be idle
                RunOne() - steps script execution, 
                           returns whether still running or not
                Reset() - disposes and re-instantiates script
                          ??? if called a lot, can do it more efficiently ???
                GetStateEventFlags() - get bitmask of event handlers defined
                                       by the script for a given state
                GetSnapshot() - get script current state
                RestoreSnapshot() - put script in given state

            private:
                CallLoaderStateChange() - called when script executes a
                                          'state <newstate>;' statement

    Wrapper

    Module

