//////////////////////////////////////////////////////////////
//
// Copyright (c) 2009 Careminster Limited and Melanie Thielker
// Copyright (c) 2010 Mike Rieker, Beverly, MA, USA
//
// All rights reserved
//

using System;
using System.Threading;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Remoting.Lifetime;
using System.Security.Policy;
using System.IO;
using System.Xml;
using System.Text;
using Mono.Tasklets;
using OpenMetaverse;
using OpenSim.Framework;
using OpenSim.Region.ScriptEngine.Interfaces;
using OpenSim.Region.ScriptEngine.Shared;
using OpenSim.Region.ScriptEngine.Shared.Api;
using OpenSim.Region.ScriptEngine.Shared.ScriptBase;
using OpenSim.Region.ScriptEngine.XMREngine;
using OpenSim.Region.Framework.Scenes;
using log4net;

#include "lsltypes.h"

namespace OpenSim.Region.ScriptEngine.XMREngine
{
    public partial class XMRInstance
    {
        /****************************************************************************\
         *  The only method of interest to outside this module is the Initializer.  *
         *                                                                          *
         *  The rest of this module contains support routines for the Initializer.  *
        \****************************************************************************/

        /**
         * @brief Initializer, loads script in memory and all ready for running.
         * @param localID = ?
         * @param itemID = UUID of this script instance
         * @param sourceCode = script source code all in one string
         * @param startParam = as passed to llRez() ???
         * @param postOnRez = post an "on_rez" event to script
         * @param stateSource = ?
         * @param engine = XMREngine instance this is part of
         * @param part = the object the script is attached to ?
         * @param item = ?
         * @param scriptBasePath = directory name where files are
         * @param stackSize = number of bytes to allocate for stacks
         * @param errors = return compiler errors in this array
         * @param forceReset = reset script to default state (ignore saved state)
         *                     (also forces recompilation if sourceCode != "")
         * Throws exception if any error, so it was successful if it returns.
         */
        public void Initialize(uint localID, UUID itemID, string sourceCode,
                               int startParam, bool postOnRez, int stateSource,
                               XMREngine engine, SceneObjectPart part, 
                               TaskInventoryItem item, string scriptBasePath,
                               int stackSize, int heapSize, ArrayList errors, 
                               bool forceReset)
        {
            if (stackSize < 16384) stackSize = 16384;
            if (heapSize  < 16384) heapSize  = 16384;

            /*
             * Save all call parameters in instance vars for easy access.
             */
            m_LocalID        = localID;
            m_ItemID         = itemID;
            m_SourceCode     = sourceCode;
            m_StartParam     = startParam;
            m_PostOnRez      = postOnRez;
            m_StateSource    = (StateSource)stateSource;
            m_Engine         = engine;
            m_Part           = part;
            m_Item           = item;
            m_AssetID        = item.AssetID;
            m_ScriptBasePath = scriptBasePath;
            m_StackSize      = stackSize;
            m_HeapSize       = heapSize;
            m_CompilerErrors = errors;
            m_StateFileName  = GetStateFileName(scriptBasePath, itemID);
            m_ForceReset     = forceReset;

            /*
             * Set up a descriptive name string for debug messages.
             */
            m_DescName = part.Name + ":" + item.Name;

            /*
             * Maybe trace heap usage.
             */
            if ((engine.m_traceHeapUse != null) && m_DescName.Contains(engine.m_traceHeapUse)) {
                this.traceHeapUse = m_DescName;
            }

            /*
             * Not in any XMRInstQueue, and it is being constructed so don't
             * try to run it yet.
             */
            m_NextInst = this;
            m_PrevInst = this;
            m_IState   = XMRInstState.CONSTRUCT;

            /*
             * Set up list of API calls it has available.
             * This also gets the API modules ready to accept setup data, such as
             * active listeners being restored.
             */
            m_Apis = new Dictionary<string,IScriptApi>();
            ApiManager am = new ApiManager();
            foreach (string api in am.GetApis())
            {
                IScriptApi scriptApi;

                if (api != "LSL") {
                    scriptApi = am.CreateApi(api);
                } else {
                    scriptApi = m_XMRLSLApi = new XMRLSL_Api();
                }

                m_Apis[api] = scriptApi;
                scriptApi.Initialize(m_Engine, m_Part, m_LocalID, m_ItemID);
                this.InitApi(api, scriptApi);
            }
            m_XMRLSLApi.InitXMRLSLApi();

            /*
             * Get object loaded, compiling script and reading .state file as
             * necessary to restore the state.
             */
            suspendOnCheckRunHold = true;
            InstantiateScript();
            m_SourceCode = null;
            if (m_ObjCode == null) throw new ArgumentNullException ("m_ObjCode");
            if (m_ObjCode.scriptEventHandlerTable == null) {
                throw new ArgumentNullException ("m_ObjCode.scriptEventHandlerTable");
            }

            suspendOnCheckRunHold = false;
            suspendOnCheckRunTemp = false;

            /*
             * Declare which events the script's current state can handle.
             */
            int eventMask = GetStateEventFlags(stateCode);
            m_Part.SetScriptEvents(m_ItemID, eventMask);
        }

        // Get script object code loaded in memory and all ready to run,
        // ready to resume it from where the .state file says it was last
        private void InstantiateScript()
        {
            lock (m_CompileLock)
            {
                bool compiledIt = false;
                ScriptObjCode objCode;

                /*
                 * There may already be an ScriptObjCode struct in memory that
                 * we can use.  If not, try to compile it.
                 */
                if (!m_CompiledScriptObjCode.TryGetValue (m_AssetID, 
                                                          out objCode)) {
                    objCode = TryToCompile();
                    compiledIt = true;
                }

                /*
                 * Fill in script instance from object code
                 * Script instance is put in a "never-ever-has-run-before" state.
                 */
                LoadObjCode(objCode);

                /*
                 * Fill in script intial state
                 * - either as loaded from a .state file
                 * - or initial default state_entry() event
                 */
                LoadInitialState();
                m_log.Debug("[XMREngine]: " + m_ItemID + " load successful");

                /*
                 * Loaded successfully, increment reference count.
                 *
                 * If we just compiled it though, reset count to 0 first as
                 * this is the one-and-only existance of this objCode struct,
                 * and we want any old ones for this assetID to be garbage
                 * collected.
                 */
                if (compiledIt) {
                    m_CompiledScriptObjCode[m_AssetID]  = objCode;
                    m_CompiledScriptRefCount[m_AssetID] = 0;
                }
                m_ObjCode = objCode;
                m_CompiledScriptRefCount[m_AssetID] ++;
            }
        }

        // Try to create object code from source code
        // If error, just throw exception
        private ScriptObjCode TryToCompile()
        {
            m_CompilerErrors.Clear();

            /*
             * If object file exists, create ScriptObjCode directly from that.
             * Otherwise, compile the source to create object file then create
             * ScriptObjCode from that.
             */
            ScriptObjCode objCode = ScriptCompile.Compile(m_SourceCode, 
                                                          m_AssetID.ToString(), 
                                                          m_ScriptBasePath, 
                                                          m_ForceReset, 
                                                          ErrorHandler);
            if (m_CompilerErrors.Count != 0)
            {
                throw new Exception ("compilation errors");
            }
            if (objCode == null)
            {
                throw new Exception ("compilation failed");
            }

            return objCode;
        }

        /*
         * Fill in script object initial contents.
         * Set the initial state to "default".
         */
        private void LoadObjCode (ScriptObjCode objCode)
        {
            if (objCode  == null) throw new ArgumentNullException ("objCode");

            this.gblArrays     = new XMR_Array[objCode.numGblArrays];
            this.gblFloats     = new SCRIPTFLOAT[objCode.numGblFloats];
            this.gblIntegers   = new int[objCode.numGblIntegers];
            this.gblLists      = new LSL_List[objCode.numGblLists];
            this.gblObjects    = new object[objCode.numGblObjects];
            this.gblRotations  = new LSL_Rotation[objCode.numGblRotations];
            this.gblStrings    = new string[objCode.numGblStrings];
            this.gblVectors    = new LSL_Vector[objCode.numGblVectors];
            this.gblSDTClasses = new XMRSDTypeClassInstance[objCode.numGblSDTClasses];

            /*
             * Script can handle these event codes.
             */
            m_HaveEventHandlers = new bool[objCode.scriptEventHandlerTable.GetLength(1)];
            for (int i = objCode.scriptEventHandlerTable.GetLength(0); -- i >= 0;) {
                for (int j = objCode.scriptEventHandlerTable.GetLength(1); -- j >= 0;) {
                    if (objCode.scriptEventHandlerTable[i,j] != null) {
                        m_HaveEventHandlers[j] = true;
                    }
                }
            }

            /*
             * Script must leave this much stack remaining on calls to CheckRun().
             */
            this.stackLimit = (uint)(m_StackSize / 2);

            /*
             * This is how many total heap bytes script is allowed to use.
             * Start with some fixed amount then subtract off static global sizes.
             */
            this.heapLimit  = m_HeapSize;
            this.heapLimit -= 16 * objCode.numGblArrays;
            this.heapLimit -=  4 * objCode.numGblFloats;
            this.heapLimit -=  4 * objCode.numGblIntegers;
            this.heapLimit -= 16 * objCode.numGblLists;
            this.heapLimit -= 16 * objCode.numGblObjects;
            this.heapLimit -= 16 * objCode.numGblRotations;
            this.heapLimit -= 16 * objCode.numGblStrings;
            this.heapLimit -= 12 * objCode.numGblVectors;

            /*
             * Set up microthread object which actually calls the script event handler functions.
             */
            this.microthread = new ScriptUThread (this);
        }

        //  LoadInitialState()
        //      if no state XML file exists for the asset,
        //          post initial default state events
        //      else
        //          try to restore from .state file
        //  If any error, throw exception
        //
        private void LoadInitialState()
        {
            if (m_ForceReset) {
                m_log.Debug("[XMREngine]: deleting " + m_StateFileName);
                File.Delete(m_StateFileName);
            }

            /*
             * If no .state file exists, start from default state
             * Otherwise, read initial state from the .state file
             */
            m_EventCounts = new int[(int)ScriptEventCode.Size];
            if (!File.Exists(m_StateFileName)) {
                m_log.Debug("[XMREngine]: " + m_ItemID + " starting with reset state");
                m_Running = true;                  // event processing is enabled
                eventCode = ScriptEventCode.None;  // not processing any event

                // default state_entry() must initialize global variables
                doGblInit = true;
                stateCode = 0;

                m_EventQueue = new LinkedList<EventParams>();
                PostEvent(new EventParams("state_entry", 
                                          zeroObjectArray,
                                          zeroDetectParams));
            } else {
                m_log.Debug("[XMREngine]: " + m_ItemID + " restoring from .state file");
                FileStream fs = File.Open(m_StateFileName, 
                                          FileMode.Open, 
                                          FileAccess.Read);
                StreamReader ss = new StreamReader(fs);
                string xml = ss.ReadToEnd();
                ss.Close();
                fs.Close();

                XmlDocument doc = new XmlDocument();
                doc.LoadXml(xml);
                LoadScriptState(doc);
            }

            /*
             * Post event(s) saying what caused the script to start.
             */
            if (m_PostOnRez) {
                PostEvent(new EventParams("on_rez",
                          new Object[] { m_StartParam }, 
                          zeroDetectParams));
            }

            switch (m_StateSource) {
                case StateSource.AttachedRez: {
                    PostEvent(new EventParams("attach",
                              new object[] { m_Part.ParentGroup.AttachedAvatar.ToString() }, 
                              zeroDetectParams));
                    break;
                }

                case StateSource.PrimCrossing: {
                    PostEvent(new EventParams("changed",
                              sbcCR, 
                              zeroDetectParams));
                    break;
                }

                case StateSource.Teleporting: {
                    PostEvent(new EventParams("changed",
                              sbcCR, 
                              zeroDetectParams));
                    PostEvent(new EventParams("changed",
                              sbcCT, 
                              zeroDetectParams));
                    break;
                }

                case StateSource.RegionStart: {
                    PostEvent(new EventParams("changed",
                              sbcCRS, 
                              zeroDetectParams));
                    break;
                }
            }
        }

        private static Object[] sbcCRS = new Object[] { ScriptBaseClass.CHANGED_REGION_START };
        private static Object[] sbcCR  = new Object[] { ScriptBaseClass.CHANGED_REGION };
        private static Object[] sbcCT  = new Object[] { ScriptBaseClass.CHANGED_TELEPORT };

        /**
         * @brief Save compilation error messages for later retrieval
         *        via GetScriptErrors().
         */
        private void ErrorHandler(Token token, string message)
        {
            if (token != null)
            {
                m_CompilerErrors.Add(
                        String.Format("{0} Error: {1}", token.SrcLoc, message));
            }
            else if (message != null)
            {
                m_CompilerErrors.Add(
                        String.Format("(0,0) Error: {0}", message));
            }
            else
            {
                m_CompilerErrors.Add("Error compiling, see exception in log");
            }
        }

        /**
         * @brief Load script state from the given XML doc into the script memory
         *  <ScriptState Engine="XMREngine" Asset=...>
         *      <Running>...</Running>
         *      <DoGblInit>...</DoGblInit>
         *      <Permissions granted=... mask=... />
         *      RestoreDetectParams()
         *      <Plugins>
         *          ExtractXMLObjectArray("plugin")
         *      </Plugins>
         *      <Snapshot>
         *          MigrateInEventHandler()
         *      </Snapshot>
         *  </ScriptState>
         */
        private void LoadScriptState(XmlDocument doc)
        {
            DetectParams[] detParams;
            LinkedList<EventParams> eventQueue;

            // Everything we know is enclosed in <ScriptState>...</ScriptState>
            XmlElement scriptStateN = (XmlElement)doc.SelectSingleNode("ScriptState");
            if (scriptStateN == null) {
                throw new Exception("no <ScriptState> tag");
            }
            string sen = scriptStateN.GetAttribute("Engine");
            if ((sen == null) || (sen != m_Engine.ScriptEngineName)) {
                throw new Exception("<ScriptState> missing Engine=\"XMREngine\" attribute");
            }

            // AssetID is unique for the script source text so make sure the
            // state file was written for that source file
            string assetID = scriptStateN.GetAttribute("Asset");
            if (assetID != m_Item.AssetID.ToString())
            {
                throw new Exception("<ScriptState> assetID mismatch");
            }

            // Get various attributes
            XmlElement runningN = (XmlElement)scriptStateN.SelectSingleNode("Running");
            m_Running = bool.Parse(runningN.InnerText);

            XmlElement doGblInitN = (XmlElement)scriptStateN.SelectSingleNode("DoGblInit");
            doGblInit = bool.Parse(doGblInitN.InnerText);

            XmlElement permissionsN = (XmlElement)scriptStateN.SelectSingleNode("Permissions");
            m_Item.PermsGranter = new UUID(permissionsN.GetAttribute("granter"));
            m_Item.PermsMask = Convert.ToInt32(permissionsN.GetAttribute("mask"));
            m_Part.Inventory.UpdateInventoryItem(m_Item, false, false);

            // get values used by stuff like llDetectedGrab, etc.
            detParams = RestoreDetectParams(scriptStateN.SelectSingleNode("DetectArray"));

            // Restore queued events
            eventQueue = RestoreEventQueue(scriptStateN.SelectSingleNode("EventQueue"));

            // Restore timers and listeners
            XmlElement pluginN = (XmlElement)scriptStateN.SelectSingleNode("Plugins");
            Object[] pluginData = ExtractXMLObjectArray(pluginN, "plugin");

            // Script's global variables and stack contents
            XmlElement snapshotN = 
                    (XmlElement)scriptStateN.SelectSingleNode("Snapshot");

            Byte[] data = Convert.FromBase64String(snapshotN.InnerText);
            MemoryStream ms = new MemoryStream();
            ms.Write(data, 0, data.Length);
            ms.Seek(0, SeekOrigin.Begin);
            MigrateInEventHandler(ms);
            ms.Close();

            // Restore event queues
            m_DetectParams = detParams;
            m_EventQueue   = eventQueue;
            for (int i = m_EventCounts.Length; -- i >= 0;) m_EventCounts[i] = 0;
            foreach (EventParams evt in m_EventQueue)
            {
                ScriptEventCode eventCode = (ScriptEventCode)Enum.Parse (typeof (ScriptEventCode),
                                                                         evt.EventName);
                m_EventCounts[(int)eventCode] ++;
            }

            // Requeue timer and listeners (possibly queuing new events)
            AsyncCommandManager.CreateFromData(m_Engine,
                    m_LocalID, m_ItemID, m_Part.UUID,
                    pluginData);
        }

        /**
         * @brief Read llDetectedGrab, etc, values from XML
         *  <EventQueue>
         *      <DetectParams>...</DetectParams>
         *          .
         *          .
         *          .
         *  </EventQueue>
         */
        private LinkedList<EventParams> RestoreEventQueue(XmlNode eventsN)
        {
            LinkedList<EventParams> eventQueue = new LinkedList<EventParams>();
            if (eventsN != null) {
                XmlNodeList eventL = eventsN.SelectNodes("Event");
                foreach (XmlNode evnt in eventL)
                {
                    string name            = ((XmlElement)evnt).GetAttribute("Name");
                    object[] parms         = ExtractXMLObjectArray(evnt, "param");
                    DetectParams[] detects = RestoreDetectParams(evnt);

                    if (parms   == null) parms   = zeroObjectArray;
                    if (detects == null) detects = zeroDetectParams;

                    EventParams evt = new EventParams(name, parms, detects);
                    eventQueue.AddLast(evt);
                }
            }
            return eventQueue;
        }

        /**
         * @brief Read llDetectedGrab, etc, values from XML
         *  <DetectArray>
         *      <DetectParams>...</DetectParams>
         *          .
         *          .
         *          .
         *  </DetectArray>
         */
        private DetectParams[] RestoreDetectParams(XmlNode detectedN)
        {
            if (detectedN == null) return null;

            List<DetectParams> detected = new List<DetectParams>();
            XmlNodeList detectL = detectedN.SelectNodes("DetectParams");

            DetectParams detprm = new DetectParams();
            foreach (XmlNode detxml in detectL) {
                try {
                    detprm.Group     = new UUID(detxml.Attributes.GetNamedItem("group").Value);
                    detprm.Key       = new UUID(detxml.Attributes.GetNamedItem("key").Value);
                    detprm.Owner     = new UUID(detxml.Attributes.GetNamedItem("owner").Value);

                    detprm.LinkNum   = Int32.Parse(detxml.Attributes.GetNamedItem("linkNum").Value);
                    detprm.Type      = Int32.Parse(detxml.Attributes.GetNamedItem("type").Value);

                    detprm.Name      = detxml.Attributes.GetNamedItem("name").Value;

                    detprm.OffsetPos = new LSL_Types.Vector3(detxml.Attributes.GetNamedItem("pos").Value);
                    detprm.Position  = new LSL_Types.Vector3(detxml.Attributes.GetNamedItem("position").Value);
                    detprm.Velocity  = new LSL_Types.Vector3(detxml.Attributes.GetNamedItem("velocity").Value);

                    detprm.Rotation  = new LSL_Types.Quaternion(detxml.Attributes.GetNamedItem("rotation").Value);

                    detected.Add(detprm);
                    detprm = new DetectParams();
                } catch (Exception e) {
                    m_log.Warn("[XMREngine]: RestoreDetectParams bad XML: " + detxml.ToString());
                    m_log.Warn("[XMREngine]: ... " + e.ToString());
                }
            }

            return detected.ToArray();
        }

        /**
         * @brief Extract elements of an array of objects from an XML parent.
         *        Each element is of form <tag ...>...</tag>
         * @param parent = XML parent to extract them from
         * @param tag = what the value's tag is
         * @returns object array of the values
         */
        private static object[] ExtractXMLObjectArray(XmlNode parent, string tag)
        {
            List<Object> olist = new List<Object>();

            XmlNodeList itemL = parent.SelectNodes(tag);
            foreach (XmlNode item in itemL)
            {
                olist.Add(ExtractXMLObjectValue(item));
            }

            return olist.ToArray();
        }

        private static object ExtractXMLObjectValue(XmlNode item)
        {
            string itemType = item.Attributes.GetNamedItem("type").Value;

            if (itemType == "list")
            {
                return new LSL_List(ExtractXMLObjectArray(item, "item"));
            }

            if (itemType == "OpenMetaverse.UUID")
            {
                UUID val = new UUID();
                UUID.TryParse(item.InnerText, out val);
                return val;
            }

            Type itemT = Type.GetType(itemType);
            if (itemT == null)
            {
                Object[] args = new Object[] { item.InnerText };

                string assembly = itemType + ", OpenSim.Region.ScriptEngine.Shared";
                itemT = Type.GetType(assembly);
                if (itemT == null)
                {
                    return null;
                }
                return Activator.CreateInstance(itemT, args);
            }

            return Convert.ChangeType(item.InnerText, itemT);
        }

        /*
         * Migrate an event handler in from a stream.
         *
         * Input:
         *  stream = as generated by MigrateOutEventHandler()
         */
        private void MigrateInEventHandler (Stream stream)
        {
            /*
             * Set up to migrate state in from the network stream.
             */
            this.migrateInReader  = new BinaryReader (stream);
            this.migrateInStream  = stream;
            this.migrateInObjects = new Dictionary<int, object> ();

            /*
             * Read current state code and event code from stream.
             * And it also marks us busy (by setting this.eventCode) so we can't be
             * started again and this event lost.
             */
            int mv = stream.ReadByte ();
            int cv = stream.ReadByte ();
            if (mv != migrationVersion) {
                throw new Exception ("incoming migration version " + mv + " but accept only " + migrationVersion);
            }
            if (cv != ScriptCodeGen.COMPILED_VERSION_VALUE) {
                throw new Exception ("incoming compilation version " + cv + " but accept only " + ScriptCodeGen.COMPILED_VERSION_VALUE);
            }
            this.stateCode = (int)RecvObjValue ();
            this.eventCode = (ScriptEventCode)RecvObjValue ();
            this.heapLeft  = this.heapLimit - (int)RecvObjValue ();
            this.ehArgs    = (object[])RecvObjValue ();

            /*
             * Read script globals in.
             */
            this.gblArrays    = (XMR_Array[])   RecvObjArray (typeof (XMR_Array));
            this.gblFloats    = (SCRIPTFLOAT[]) RecvObjArray (typeof (SCRIPTFLOAT));
            this.gblIntegers  = (int[])         RecvObjArray (typeof (int));
            this.gblLists     = (LSL_List[])    RecvObjArray (typeof (LSL_List));
            this.gblObjects   = (object[])      RecvObjArray (typeof (object));
            this.gblRotations = (LSL_Rotation[])RecvObjArray (typeof (LSL_Rotation));
            this.gblStrings   = (string[])      RecvObjArray (typeof (string));
            this.gblVectors   = (LSL_Vector[])  RecvObjArray (typeof (LSL_Vector));

            /*
             * If eventCode is None, it means the script was idle when migrated.
             * So we don't have to read script's stack in.
             */
            if (this.eventCode != ScriptEventCode.None) {

                /*
                 * We have to be running on the microthread stack to restore to the event handler.
                 * So read the stack frames from the stream.
                 * The first one read is the event handler function itself and the 
                 * last one we get is the function that called CheckRun().
                 */
                int callNo;
                this.stackFrames = null;
                XMRStackFrame lastSF = null;
                while ((callNo = this.migrateInReader.ReadInt32 ()) >= 0) {
                    XMRStackFrame sf = new XMRStackFrame ();
                    sf.callNo   = callNo;
                    sf.funcName = this.migrateInReader.ReadString ();
                    sf.objArray = (object[]) RecvObjArray (typeof (object));
                    if (lastSF == null) this.stackFrames = sf;
                                   else lastSF.nextSF = sf;
                    lastSF = sf;
                }

                /*
                 * So microthread.Start() calls XMRScriptUThread.Main() which calls the
                 * event handler function.  The event handler function sees the stack
                 * frames in this.stackFrames and restores its args and locals, then calls
                 * whatever it was calling when the snapshot was taken.  That function also
                 * sees this.stackFrames and restores its args and locals, and so on...
                 * Eventually it gets to the point of calling CheckRun() which sees we are
                 * doing a restore and it suspends, returning here with the microthread
                 * stack all restored.  It shouldn't ever throw an exception.
                 */
                this.stackFramesRestored = false;
                microthread.Start ();
                if (!this.stackFramesRestored) throw new Exception ("migrate in did not complete");
            }

            /*
             * Clear out migration state.
             */
            this.migrateInReader  = null;
            this.migrateInStream  = null;
            this.migrateInObjects = null;
        }

        /**
         * @brief Read an array of values from the stream.
         * @param eleType = type of each element
         * @returns array of the elements
         */
        private Array RecvObjArray (Type eleType)
        {
            int length = (int)RecvObjValue ();
            Array array = Array.CreateInstance (eleType, length);
            for (int i = 0; i < length; i ++) {
                array.SetValue (RecvObjValue (), i);
            }
            return array;
        }

        /**
         * @brief Read a single value from the stream.
         * @returns value (boxed as needed)
         */
        private object RecvObjValue ()
        {
            int ident = this.migrateInObjects.Count;
            Ser code = (Ser)this.migrateInReader.ReadByte ();
            switch (code) {
                case Ser.NULL: {
                    return null;
                }
                case Ser.EVENTCODE: {
                    return (ScriptEventCode)this.migrateInReader.ReadInt32 ();
                }
                case Ser.LSLFLOAT: {
                    return new LSL_Float (this.migrateInReader.ReadDouble ());
                }
                case Ser.LSLINT: {
                    return new LSL_Integer (this.migrateInReader.ReadInt32 ());
                }
                case Ser.LSLKEY: {
                    return new LSL_Key ((string)RecvObjValue ());
                }
                case Ser.LSLLIST: {
                    LSL_List list =  new LSL_List (null);
                    this.migrateInObjects.Add (ident, list);
                    list.Data = (object[])RecvObjValue ();
                    return list;
                }
                case Ser.LSLROT: {
                    double x = this.migrateInReader.ReadDouble ();
                    double y = this.migrateInReader.ReadDouble ();
                    double z = this.migrateInReader.ReadDouble ();
                    double s = this.migrateInReader.ReadDouble ();
                    return new LSL_Rotation (x, y, z, s);
                }
                case Ser.LSLSTR: {
                    return new LSL_String ((string)RecvObjValue ());
                }
                case Ser.LSLVEC: {
                    double x = this.migrateInReader.ReadDouble ();
                    double y = this.migrateInReader.ReadDouble ();
                    double z = this.migrateInReader.ReadDouble ();
                    return new LSL_Vector (x, y, z);
                }
                case Ser.OBJARRAY: {
                    int len = this.migrateInReader.ReadInt32 ();
                    object[] array = new object[len];
                    this.migrateInObjects.Add (ident, array);
                    for (int i = 0; i < len; i ++) {
                        array[i] = RecvObjValue ();
                    }
                    return array;
                }
                case Ser.SYSBOOL: {
                    return this.migrateInReader.ReadBoolean ();
                }
                case Ser.SYSDOUB: {
                    return this.migrateInReader.ReadDouble ();
                }
                case Ser.SYSFLOAT: {
                    return this.migrateInReader.ReadSingle ();
                }
                case Ser.SYSINT: {
                    return this.migrateInReader.ReadInt32 ();
                }
                case Ser.SYSSTR: {
                    string s = this.migrateInReader.ReadString ();
                    this.migrateInObjects.Add (ident, s);
                    return s;
                }
                case Ser.XMRARRAY: {
                    XMR_Array array = new XMR_Array ();
                    this.migrateInObjects.Add (ident, array);
                    array.RecvArrayObj (this.RecvObjValue);
                    return array;
                }
                case Ser.DETPRMS: {
                    DetectParams dp = new DetectParams ();
                    SurfaceTouchEventArgs stea = new SurfaceTouchEventArgs ();
                    this.migrateInObjects.Add (ident, dp);

                    dp.Key         = new UUID (this.migrateInReader.ReadString ());
                    dp.OffsetPos   = (LSL_Vector)RecvObjValue ();
                    dp.LinkNum     = this.migrateInReader.ReadInt32 ();
                    dp.Group       = new UUID (this.migrateInReader.ReadString ());
                    dp.Name        = this.migrateInReader.ReadString ();
                    dp.Owner       = new UUID (this.migrateInReader.ReadString ());
                    dp.Position    = (LSL_Vector)RecvObjValue ();
                    dp.Rotation    = (LSL_Rotation)RecvObjValue ();
                    dp.Type        = this.migrateInReader.ReadInt32 ();
                    dp.Velocity    = (LSL_Vector)RecvObjValue ();

                    stea.STCoord   = LSLVec2OMVec ((LSL_Vector)RecvObjValue ());
                    stea.Normal    = LSLVec2OMVec ((LSL_Vector)RecvObjValue ());
                    stea.Binormal  = LSLVec2OMVec ((LSL_Vector)RecvObjValue ());
                    stea.Position  = LSLVec2OMVec ((LSL_Vector)RecvObjValue ());
                    stea.UVCoord   = LSLVec2OMVec ((LSL_Vector)RecvObjValue ());
                    stea.FaceIndex = this.migrateInReader.ReadInt32 ();

                    dp.SurfaceTouchArgs = stea;

                    return dp;
                }
                case Ser.DUPREF: {
                    ident = this.migrateInReader.ReadInt32 ();
                    return this.migrateInObjects[ident];
                }
                case Ser.XMRINST: {
                    return this;
                }
                case Ser.DELEGATE: {
                    string name = this.migrateInReader.ReadString ();
                    string sig  = this.migrateInReader.ReadString ();
                    object targ = RecvObjValue ();
                    return GetScriptMethodDelegate (name, sig, targ);
                }
                default: throw new Exception ("bad stream code " + code.ToString ());
            }
        }
    }
}
