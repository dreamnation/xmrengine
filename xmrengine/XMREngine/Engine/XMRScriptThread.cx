/***************************************************\
 *  COPYRIGHT 2012, Mike Rieker, Beverly, MA, USA  *
 *  All rights reserved.                           *
\***************************************************/

using Mono.Tasklets;
using System;
using System.Threading;
using log4net;

namespace OpenSim.Region.ScriptEngine.XMREngine
{

    /**
     * @brief There are NUMSCRIPTHREADWKRS of these.
     *        Each sits in a loop checking the Start and Yield queues for 
     *        a script to run and calls the script as a microthread.
     */
    public class XMRScriptThread {

        private static int    m_WakeUpOne  = 0;
        private static object m_WakeUpLock = new object();

        /**
         * @brief Something was just added to the Start or Yield queue so
         *        wake one of the XMRScriptThread instances to run it.
         */
        public static void WakeUpOne()
        {
            lock (m_WakeUpLock)
            {
                m_WakeUpOne ++;
                Monitor.Pulse (m_WakeUpLock);
            }
        }

        private bool        m_Exiting = false;
        private bool        m_SuspendScriptThreadFlag = false;
        private bool        m_WakeUpThis = false;
        public  DateTime    m_LastRanAt = DateTime.MinValue;
        public  int         m_ScriptThreadTID = 0;
        public  long        m_ScriptExecTime = 0;
        private Thread      thd;
        private XMREngine   engine;
        public  XMRInstance m_RunInstance = null;

        public XMRScriptThread(XMREngine eng)
        {
            engine = eng;
            thd = new Thread(RunScriptThread);
            thd.Priority = ThreadPriority.BelowNormal;
            thd.Start();
        }

        public void SuspendThread()
        {
            m_SuspendScriptThreadFlag = true;
            WakeUpScriptThread();
        }

        public void ResumeThread()
        {
            m_SuspendScriptThreadFlag = false;
            WakeUpScriptThread();
        }

        public void Terminate()
        {
            m_Exiting = true;
            WakeUpScriptThread();
            thd.Join();
        }

        public void TimeSlice()
        {
            XMRInstance instance = m_RunInstance;
            if (instance != null) {
                instance.suspendOnCheckRunTemp = true;
            }
        }

        /**
         * @brief Wake up this XMRScriptThread instance.
         */
        private void WakeUpScriptThread()
        {
            lock (m_WakeUpLock) {
                m_WakeUpThis = true;
                Monitor.PulseAll (m_WakeUpLock);
            }
        }

        /**
         * @brief Thread that runs the scripts.
         */
        delegate int GetTid();
        delegate int GetSetAffinity(int tid, byte[] maskArray);
        private void RunScriptThread()
        {
            XMRInstance inst;

            /*
             * Set affinity mask to the NUMSCRIPTHREADCPUS highest numbered cores
             * so we can't hog more than that many cores no matter what.
             */
            string soName = "./xmrhelpers" + (IntPtr.Size * 8) + ".so";

            GetTid getTid = MMRDLOpen.GetDelegate<GetTid> (soName, "GetTid", null);
            GetSetAffinity getAffinity = MMRDLOpen.GetDelegate<GetSetAffinity> (soName, "GetAffinity", null);
            GetSetAffinity setAffinity = MMRDLOpen.GetDelegate<GetSetAffinity> (soName, "SetAffinity", null);

            m_ScriptThreadTID = getTid();
            XMREngine.m_log.DebugFormat("[XMREngine]: RunScriptThread tid: {0}", m_ScriptThreadTID);
            do {
                int rc = getAffinity (m_ScriptThreadTID, null);
                if (rc < 0) {
                    XMREngine.m_log.ErrorFormat("[XMREngine]: failed to get thread affinity size: errno={0}", rc);
                    break;
                }
                byte[] affinity = new byte[rc];
                rc = getAffinity (m_ScriptThreadTID, affinity);
                if (rc != affinity.Length) {
                    XMREngine.m_log.ErrorFormat("[XMREngine]: failed to get thread affinity mask: errno={0}", rc);
                    break;
                }
                int n = XMREngine.NUMSCRIPTHREADCPUS;
                for (int i = rc; -- i >= 0;) {
                    for (byte j = 0x80; j != 0; j /= 2) {
                        if (((affinity[i] & j) != 0) && (-- n < 0)) {
                            affinity[i] -= j;
                        }
                    }
                }
                rc = setAffinity (m_ScriptThreadTID, affinity);
                if (rc != affinity.Length) {
                    XMREngine.m_log.ErrorFormat("[XMREngine]: failed to set thread affinity mask: errno={0}", rc);
                    break;
                }
                rc = getAffinity (m_ScriptThreadTID, affinity);
                if (rc != affinity.Length) {
                    XMREngine.m_log.ErrorFormat("[XMREngine]: failed to get thread affinity mask: errno={0}", rc);
                    break;
                }
                string mask = "";
                for (int i = 0; i < rc; i ++) {
                    for (int j = 0; j < 8; j ++) {
                        if (((affinity[i] >> j) & 1) != 0) {
                            if (mask != "") mask += ",";
                            mask += (i * 8 + j).ToString();
                        }
                    }
                }
                XMREngine.m_log.DebugFormat("[XMREngine]: RunScriptThread affinity mask: {0}", mask);
            } while (false);

            while (!m_Exiting) {

                /*
                 * Handle 'xmr resume/suspend' commands.
                 */
                if (m_SuspendScriptThreadFlag) {
                    XMREngine.m_log.Debug ("[XMREngine]: scripts suspended");
                    lock (m_WakeUpLock) {
                        while (m_SuspendScriptThreadFlag) {
                            Monitor.Wait (m_WakeUpLock);
                        }
                    }
                    XMREngine.m_log.Debug ("[XMREngine]: scripts resumed");
                }

                m_LastRanAt = DateTime.UtcNow;
                m_ScriptExecTime -= (long)(m_LastRanAt - DateTime.MinValue).TotalMilliseconds;

                /*
                 * If event just queued to any idle scripts
                 * start them right away.  But only start so
                 * many so we can make some progress on yield
                 * queue.
                 */
                int numStarts;
                for (numStarts = 5; -- numStarts >= 0;) {
                    lock (engine.m_StartQueue) {
                        inst = engine.m_StartQueue.RemoveHead();
                    }
                    if (inst == null) break;
                    if (inst.m_IState != XMRInstState.ONSTARTQ) throw new Exception("bad state");
                    RunInstance (inst);
                }

                /*
                 * If there is something to run, run it
                 * then rescan from the beginning in case
                 * a lot of things have changed meanwhile.
                 *
                 * These are considered lower priority than
                 * m_StartQueue as they have been taking at
                 * least one quantum of CPU time and event
                 * handlers are supposed to be quick.
                 */
                lock (engine.m_YieldQueue) {
                    inst = engine.m_YieldQueue.RemoveHead();
                }
                if (inst != null) {
                    if (inst.m_IState != XMRInstState.ONYIELDQ) throw new Exception("bad state");
                    RunInstance (inst);
                    numStarts = -1;
                }

                m_ScriptExecTime += (long)(DateTime.UtcNow - DateTime.MinValue).TotalMilliseconds;

                /*
                 * If we left something dangling in the m_StartQueue or m_YieldQueue, go back to check it.
                 */
                if (numStarts < 0) continue;

                /*
                 * Nothing to do, sleep.
                 */
                lock (m_WakeUpLock) {
                    if (!m_WakeUpThis && (m_WakeUpOne <= 0)) {
                        Monitor.Wait(m_WakeUpLock);
                    }
                    m_WakeUpThis = false;
                    if ((m_WakeUpOne > 0) && (-- m_WakeUpOne > 0)) {
                        Monitor.Pulse (m_WakeUpLock);
                    }
                }
            }
        }

        /**
         * @brief A script instance was just removed from the Start or Yield Queue.
         *        So run it for a little bit then stick in whatever queue it should go in.
         */
        private void RunInstance (XMRInstance inst)
        {
            inst.m_IState = XMRInstState.RUNNING;
            m_RunInstance = inst;
            XMRInstState newIState = inst.RunOne();
            m_RunInstance = null;
            engine.HandleNewIState(inst, newIState);
        }
    }
}
