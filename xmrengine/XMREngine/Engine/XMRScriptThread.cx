/***************************************************\
 *  COPYRIGHT 2012, Mike Rieker, Beverly, MA, USA  *
 *  All rights reserved.                           *
\***************************************************/

using Mono.Tasklets;
using OpenSim.Framework.Monitoring;
using System;
using System.Collections.Generic;
using System.Threading;
using log4net;

#if HAVE_MMRUTHREADS
#define INITMONOCONTS do { } while (false)
#else
#define INITMONOCONTS \
    do if (inst.scrstack == null) {                         \
        inst.engstack = engstack;                           \
        inst.scrstack = new Mono.Tasklets.Continuation ();  \
        inst.scrstack.Mark ();                              \
    } while (false)
#endif

namespace OpenSim.Region.ScriptEngine.XMREngine
{

    /**
     * @brief There are NUMSCRIPTHREADWKRS of these.
     *        Each sits in a loop checking the Start and Yield queues for 
     *        a script to run and calls the script as a microthread.
     */
    public class XMRScriptThread {
        private static int    m_WakeUpOne  = 0;
        public  static object m_WakeUpLock = new object();
        private static Dictionary<Thread,XMRScriptThread> m_AllThreads = new Dictionary<Thread,XMRScriptThread> ();

        /**
         * @brief Something was just added to the Start or Yield queue so
         *        wake one of the XMRScriptThread instances to run it.
         */
        public static void WakeUpOne()
        {
            lock (m_WakeUpLock)
            {
                m_WakeUpOne ++;
                Monitor.Pulse (m_WakeUpLock);
            }
        }

        public static XMRScriptThread CurrentScriptThread ()
        {
            XMRScriptThread st;
            lock (m_AllThreads) {
                m_AllThreads.TryGetValue (Thread.CurrentThread, out st);
            }
            return st;
        }

        private bool        m_Exiting = false;
        private bool        m_SuspendScriptThreadFlag = false;
        private bool        m_WakeUpThis = false;
        public  DateTime    m_LastRanAt = DateTime.MinValue;
        public  int         m_ScriptThreadTID = 0;
        public  long        m_ScriptExecTime = 0;
        private Thread      thd;
        private XMREngine   engine;
        public  XMRInstance m_RunInstance = null;

        public XMRScriptThread(XMREngine eng)
        {
            engine = eng;
            thd = Watchdog.StartThread (RunScriptThread, "xmrengine script", ThreadPriority.BelowNormal, false, true);
            lock (m_AllThreads) {
                m_AllThreads.Add (thd, this);
            }
        }

        public void SuspendThread()
        {
            m_SuspendScriptThreadFlag = true;
            WakeUpScriptThread();
        }

        public void ResumeThread()
        {
            m_SuspendScriptThreadFlag = false;
            WakeUpScriptThread();
        }

        public void Terminate()
        {
            m_Exiting = true;
            WakeUpScriptThread();
            thd.Join();
            lock (m_AllThreads) {
                m_AllThreads.Remove (thd);
            }
            thd = null;
        }

        public void TimeSlice()
        {
            XMRInstance instance = m_RunInstance;
            if (instance != null) {
                instance.suspendOnCheckRunTemp = true;
            }
        }

        /**
         * @brief Wake up this XMRScriptThread instance.
         */
        private void WakeUpScriptThread()
        {
            lock (m_WakeUpLock) {
                m_WakeUpThis = true;
                Monitor.PulseAll (m_WakeUpLock);
            }
        }

        /**
         * @brief Thread that runs the scripts.
         */
        private void RunScriptThread()
        {
            XMRInstance inst;
#if !HAVE_MMRUTHREADS
            Mono.Tasklets.Continuation engstack = new Mono.Tasklets.Continuation ();
            engstack.Mark ();
#endif
            m_ScriptThreadTID = System.Threading.Thread.CurrentThread.ManagedThreadId;

            while (!m_Exiting) {
                Watchdog.UpdateThread ();

                /*
                 * Handle 'xmr resume/suspend' commands.
                 */
                if (m_SuspendScriptThreadFlag) {
                    lock (m_WakeUpLock) {
                        while (m_SuspendScriptThreadFlag &&
                               !m_Exiting &&
                               (engine.m_ThunkQueue.Count == 0)) {
                            Monitor.Wait (m_WakeUpLock, Watchdog.DEFAULT_WATCHDOG_TIMEOUT_MS / 2);
                            Watchdog.UpdateThread ();
                        }
                    }
                }

                /*
                 * Maybe there are some scripts waiting to be migrated in or out.
                 */
                ThreadStart thunk = null;
                lock (m_WakeUpLock) {
                    if (engine.m_ThunkQueue.Count > 0) {
                        thunk = engine.m_ThunkQueue.Dequeue ();
                    }
                }
                if (thunk != null) {
                    inst = (XMRInstance)thunk.Target;
                    INITMONOCONTS;
                    thunk ();
                    continue;
                }

                if (engine.m_StartProcessing) {

                    /*
                     * If event just queued to any idle scripts
                     * start them right away.  But only start so
                     * many so we can make some progress on yield
                     * queue.
                     */
                    int numStarts;
                    for (numStarts = 5; -- numStarts >= 0;) {
                        lock (engine.m_StartQueue) {
                            inst = engine.m_StartQueue.RemoveHead();
                        }
                        if (inst == null) break;
                        if (inst.m_IState != XMRInstState.ONSTARTQ) throw new Exception("bad state");
                        INITMONOCONTS;
                        RunInstance (inst);
                    }

                    /*
                     * If there is something to run, run it
                     * then rescan from the beginning in case
                     * a lot of things have changed meanwhile.
                     *
                     * These are considered lower priority than
                     * m_StartQueue as they have been taking at
                     * least one quantum of CPU time and event
                     * handlers are supposed to be quick.
                     */
                    lock (engine.m_YieldQueue) {
                        inst = engine.m_YieldQueue.RemoveHead();
                    }
                    if (inst != null) {
                        if (inst.m_IState != XMRInstState.ONYIELDQ) throw new Exception("bad state");
                        RunInstance (inst);
                        numStarts = -1;
                    }

                    /*
                     * If we left something dangling in the m_StartQueue or m_YieldQueue, go back to check it.
                     */
                    if (numStarts < 0) continue;
                }

                /*
                 * Nothing to do, sleep.
                 */
                lock (m_WakeUpLock) {
                    if (!m_WakeUpThis && (m_WakeUpOne <= 0) && !m_Exiting) {
                        Monitor.Wait (m_WakeUpLock, Watchdog.DEFAULT_WATCHDOG_TIMEOUT_MS / 2);
                    }
                    m_WakeUpThis = false;
                    if ((m_WakeUpOne > 0) && (-- m_WakeUpOne > 0)) {
                        Monitor.Pulse (m_WakeUpLock);
                    }
                }
            }
        }

        /**
         * @brief A script instance was just removed from the Start or Yield Queue.
         *        So run it for a little bit then stick in whatever queue it should go in.
         */
        private void RunInstance (XMRInstance inst)
        {
            m_LastRanAt = DateTime.UtcNow;
            m_ScriptExecTime -= (long)(m_LastRanAt - DateTime.MinValue).TotalMilliseconds;
            inst.m_IState = XMRInstState.RUNNING;
            m_RunInstance = inst;
            XMRInstState newIState = inst.RunOne();
            m_RunInstance = null;
            engine.HandleNewIState(inst, newIState);
            m_ScriptExecTime += (long)(DateTime.UtcNow - DateTime.MinValue).TotalMilliseconds;
        }
    }
}
