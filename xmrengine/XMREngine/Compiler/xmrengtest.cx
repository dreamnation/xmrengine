/********************************************************\
 *  COPYRIGHT 2012, Mike Rieker, Beverly, MA, USA       *
 *  All rights reserved.                                *
\********************************************************/

/**
 * @brief Main program for the script compiler.
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection.Emit;
using System.Text;

#include "lsltypes.h"

namespace OpenSim.Region.ScriptEngine.XMREngine
{

    public class XMREngTest
    {
        /**
         * @brief Stand-alone test program.
         *
         * mono xmrengtest.exe <xmrobjfile> -checkrun -obj <xmrobjoutput> -asm <xmrasmoutput> <sourcefile>
         */
        public static void Main (string[] args)
        {
            bool doCheckRun = false;
            string asmFileName = null;
            string objFileName = null;
            string srcFileName = null;

            for (int i = 0; i < args.Length; i ++) {
                string arg = args[i];
                if (arg == "-asm") {
                    if (++ i >= args.Length) goto usage;
                    asmFileName = args[i];
                    continue;
                }
                if (arg == "-checkrun") {
                    doCheckRun = true;
                    continue;
                }
                if (arg == "-obj") {
                    if (++ i >= args.Length) goto usage;
                    objFileName = args[i];
                    continue;
                }
                if (srcFileName != null) goto usage;
                srcFileName = arg;
            }
            if (srcFileName == null) goto usage;

            /*
             * Read whole source into memory.
             */
            string source = "# 1 \"" + srcFileName + "\"\n" + File.ReadAllText (srcFileName);

            /*
             * Parse source string into tokens.
             */
            Console.WriteLine ("Compiling...");
            TokenBegin tokenBegin = TokenBegin.Construct (StandAloneErrorMessage, source);
            if (tokenBegin == null) {
                Console.WriteLine ("Parsing errors.");
                Environment.Exit (1);
            }

            /*
             * Create abstract syntax tree from raw tokens.
             */
            TokenScript tokenScript = ScriptReduce.Reduce( tokenBegin);
            if (tokenScript == null) {
                Console.WriteLine ("Reduction errors.");
                Environment.Exit (1);
            }

            /*
             * Attempt to compile AST to object code.
             */
            Stream objFileStream;
            if (objFileName != null) {
                objFileStream = File.Create (objFileName);
            } else {
                objFileStream = new MemoryStream ();
            }
            BinaryWriter objFileWriter = new BinaryWriter (objFileStream);
            bool ok;
            ok = ScriptCodeGen.CodeGen (tokenScript, objFileWriter);
            if (objFileName != null) objFileWriter.Close ();
            if (!ok) {
                Console.WriteLine ("Compilation errors.");
                Environment.Exit (1);
            }

            /*
             * Load object code into memory.
             * Maybe also output disassembly.
             */
            if (objFileName != null) {
                objFileStream = File.OpenRead (objFileName);
            } else {
                objFileStream.Seek (0, SeekOrigin.Begin);
            }
            BinaryReader objFileReader = new BinaryReader (objFileStream);
            TextWriter asmFileWriter = null;
            if (asmFileName != null) {
                asmFileWriter = (asmFileName != "-") ? File.CreateText (asmFileName) : Console.Out;
            }
            ScriptObjCode scriptObjCode = ScriptCodeGen.PerformGeneration ("", objFileReader, asmFileWriter);
            objFileReader.Close ();
            if (asmFileWriter != null) asmFileWriter.Close ();

            /*
             * Instantiate the script and run its default state_entry() handler.
             */
            Console.WriteLine ("Running...");
            TestInstance inst = new TestInstance (scriptObjCode);
            inst.ehArgs = new object[0];
            inst.testCheckRun = doCheckRun;
            while (true) {
                try {
                    scriptObjCode.scriptEventHandlerTable[0,(int)ScriptEventCode.state_entry](inst);
                    break;
                } catch (StackCaptureException) {
                    if (inst.callMode != XMRInstAbstract.CALLMODE_SAVE) throw;
                    inst.callMode = XMRInstAbstract.CALLMODE_RESTORE;
                }
            }
            return;

        usage:
            Console.WriteLine ("usage: mono xmrengtest.exe [ -asm <asmoutfile>|- ] [ -obj <objoutfile> ] <sourcefile>");
            Environment.Exit (1);
        }

        public static void StandAloneErrorMessage (Token token, string message)
        {
            Console.WriteLine ("{0} {1}", token.SrcLoc, message);
        }
    }

    public class StackCaptureException : Exception, IXMRUncatchable { }

    public class TestInstance : XMRInstAbstract {
        public bool testCheckRun;

        public TestInstance (ScriptObjCode soc)
        {
            glblVars.AllocVarArrays (ref soc.glblSizes);
            m_ObjCode = soc;
        }

        /*********************\
         *  XMRInstAbstract  *
        \*********************/

        public override void CheckRun (int line)
        {
            if (testCheckRun) {
                switch (this.callMode) {
                    case CALLMODE_NORMAL: {
                        this.callMode = CALLMODE_SAVE;
                        this.stackFrames = null;
                        throw new StackCaptureException ();
                    }
                    case CALLMODE_RESTORE: {
                        this.callMode = CALLMODE_NORMAL;
                        break;
                    }
                    default: throw new Exception ("bad callMode " + this.callMode);
                }
            }
        }

        public override int  StackLeft ()
        {
            return 1000000;
        }
        public override LSL_List XMREventDequeue (SCRIPTFLOAT timeout, int returnMask1, int returnMask2,
                                                  int backgroundMask1, int backgroundMask2, int line)
        {
            return new LSL_List (new object[0]);
        }
        public override void XMREventEnqueue (LSL_List ev)
        { }
        public override void XMREventCallHandler (LSL_List ev)
        { }
        public override LSL_List XMREventSaveDets ()
        {
            return new LSL_List (new object[0]);
        }
        public override void XMREventLoadDets (LSL_List dpList)
        { }
    }

    public class SCRIPTBASECLASS {
        public static readonly LSL_Rotation ZERO_ROTATION = new LSL_Rotation (0.0, 0.0, 0.0, 1.0);
        public static readonly LSL_Vector   ZERO_VECTOR   = new LSL_Vector (0.0, 0.0, 0.0);

        public void llOwnerSay (string msg)
        {
            Console.WriteLine ("llOwnerSay: " + msg);
        }
    }
}
