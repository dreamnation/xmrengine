/***************************************************\
 *  COPYRIGHT 2010, Mike Rieker, Beverly, MA, USA  *
 *  All rights reserved.                           *
\***************************************************/

#include "lsltypes.h"

using OpenSim.Region.ScriptEngine.Shared.ScriptBase;
using System;
using System.IO;

namespace OpenSim.Region.ScriptEngine.XMREngine
{
    public class XMRStackFrame
    {
        public XMRStackFrame nextSF;
        public string funcName;
        public int callNo;
        public object[] objArray;
    }

    /*
     * Contains only items required by the stand-alone compiler
     * so the compiler doesn't need to pull in all of OpenSim.
     *
     * Inherit from SCRIPTBASECLASS so we can be used as 'this'
     * parameter for backend-API calls, eg llSay().
     */
    public abstract class XMRInstAbstract : SCRIPTBASECLASS
    {
        public const int CALLMODE_NORMAL  = 0;  // when function is called, it proceeds normally
        public const int CALLMODE_SAVE    = 1;  // StackSaveException() was thrown, push args/locals to stackFrames
        public const int CALLMODE_RESTORE = 2;  // when function is called, it pops state from stackFrames

        public ScriptObjCode m_ObjCode;     // script object code this instance was created from

        public object[] ehArgs;             // event handler argument array
        public bool doGblInit = true;       // default state_entry() needs to initialize global variables
        public uint stackLimit;             // CheckRun() must always see this much stack available
        public int heapLimit;               // let script use this many bytes of heap maximum
                                            // includes global vars, local vars, that reference heap
                                            // does not include value-type vars, that is part of stackLimit
        public int heapLeft;                // how much of heapLimit remains available
                                            // ...atomic updates only
        public string traceHeapUse = null;  // null: quiet; else: name of script
        public int stateCode = 0;           // state the script is in (0 = 'default')

        public int callMode = CALLMODE_NORMAL;
                                            // to capture stack frames on stackFrames:
                                            //    set to CALLMODE_SAVE just before throwing StackSaveException()
                                            //    from within CheckRun() and cleared to CALLMODE_NORMAL when
                                            //    the exception is caught
                                            // to restore stack frames from stackFrames:
                                            //    set to CALLMODE_RESTORE just before calling CallSEH() and 
                                            //    cleared to CALLMODE_NORMAL by CheckRun()
        public XMRStackFrame stackFrames;   // stack frames being saved/restored

        /*
         * These arrays hold the global variable values for the script instance.
         * The array lengths are determined by the script compilation,
         * and are found in ScriptObjCode.numGblArrays, .numGblFloats, etc.
         */
        public XMR_Array[]    gblArrays;
        public SCRIPTFLOAT[]  gblFloats;
        public int[]          gblIntegers;
        public LSL_List[]     gblLists;
        public object[]       gblObjects;
        public LSL_Rotation[] gblRotations;
        public string[]       gblStrings;
        public LSL_Vector[]   gblVectors;
        public XMRSDTypeClassInstance[] gblSDTClObjs;
        public Delegate[][]   gblSDTIntfObjs;

        /*
         * Function prototypes.
         */
        public abstract object[] CaptureStackFrame (string funcName, int callNo, int nSaves);
        public abstract object[] RestoreStackFrame (string funcName, out int callNo);

        public abstract void   ConsoleWrite (string s);
        public abstract void   CheckRun (int line);
        public abstract int    StackLeft ();
        public abstract string XMRTypeName (object o);
        public abstract LSL_List XMREventDequeue (SCRIPTFLOAT timeout, int returnMask1, int returnMask2,
                                                  int backgroundMask1, int backgroundMask2, int line);
        public abstract void XMREventEnqueue (LSL_List ev);
        public abstract void XMREventCallHandler (LSL_List ev);
        public abstract LSL_List XMREventSaveDets ();
        public abstract void XMREventLoadDets (LSL_List dpList);
        public abstract XMR_Array XMRosParseJSON (string s);

        public abstract Delegate GetScriptMethodDelegate (string name, string sig, object targ);
    }
}
